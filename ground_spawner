using UnityEngine;
using System.Collections.Generic;

public class ground_spawner : MonoBehaviour
{
    public Transform spawn_pos;
    public GameObject Ground_Plane_Obj;

    public GameObject Obstacle1; // 첫 번째 장애물 프리팹
    public GameObject Obstacle2; // 두 번째 장애물 프리팹
    public GameObject HealPack;  // 힐팩 프리팹

    public float Time_To_Spawn;
    public float Time_btwn_wave;

    public static ground_spawner instance;

    private void Awake()
    {
        if (instance == null)
        {
            instance = this;
        }
    }

    void Start()
    {
        
    }

    void Update()
    {
        if (Time.time > Time_To_Spawn)
        {
            SpawnGround();
            Time_To_Spawn = Time.time + Time_btwn_wave;
        }
    }

    public void SpawnGround()
    {
        Instantiate(Ground_Plane_Obj, spawn_pos.position, Quaternion.identity);
        SpawnObstaclesAndHealPacks(spawn_pos.position);
        spawn_pos.position = new Vector3(spawn_pos.position.x, spawn_pos.position.y, spawn_pos.position.z + 30f);
    }

    void SpawnObstaclesAndHealPacks(Vector3 groundPosition)
    {
        // 장애물과 힐팩이 배치될 수 있는 x축 위치
        float[] xPositions = { -2.25f, 0f, 2.25f };

        // 가능한 위치를 리스트에 저장
        List<Vector3> possiblePositions = new List<Vector3>();
        foreach (float xPos in xPositions)
        {
            possiblePositions.Add(groundPosition + new Vector3(xPos, -0.1f, 0f));
        }

        // 장애물 생성
        int numObstacles = Random.Range(1, 3); // 1~2개의 장애물 생성 (최대 2개)
        List<Vector3> obstaclePositions = new List<Vector3>();

        for (int i = 0; i < numObstacles; i++)
        {
            // 가능한 위치에서 랜덤으로 선택
            int index = Random.Range(0, possiblePositions.Count);
            Vector3 pos = possiblePositions[index];
            possiblePositions.RemoveAt(index); // 선택한 위치 제거

            GameObject obstaclePrefab = Random.value > 0.5f ? Obstacle1 : Obstacle2; // 랜덤하게 장애물 선택
            Instantiate(obstaclePrefab, pos, Quaternion.identity);
            obstaclePositions.Add(pos); // 장애물 위치 기록
        }

        // 힐팩 생성
        int numHealPacks = Random.Range(0, 2); // 0~1개의 힐팩 생성
        Debug.Log($"Number of HealPacks to spawn: {numHealPacks}"); // 힐팩 개수 확인

        for (int i = 0; i < numHealPacks; i++)
        {
            // 가능한 위치에서 랜덤으로 선택
            if (possiblePositions.Count == 0)
            {
                Debug.LogWarning("No more available positions for HealPacks.");
                break; // 가능한 위치가 없으면 생성 중단
            }

            int index = Random.Range(0, possiblePositions.Count);
            Vector3 pos = possiblePositions[index];
            possiblePositions.RemoveAt(index); // 선택한 위치 제거

            Vector3 healPackPos = pos + new Vector3(0f, 0.2f, 0f); // y축을 0.2로 조정
            Instantiate(HealPack, healPackPos, Quaternion.identity);
            Debug.Log($"HealPack spawned at position: {healPackPos}"); // 위치 확인
        }
    }
}
