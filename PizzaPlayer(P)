using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

namespace MyGame
{
    public class PlayerMove : MonoBehaviour
    {
        public float moveSpeed = 7f;
        CharacterController cc;
        float gravity = -20f;
        float yVelocity = 0f;
        public float jumpPower = 3f;
        public bool isJumping = false;

        // 플레이어 체력 변수
        public int hp = 20;
        // 최대 체력 변수
        int maxHp = 20;
        // hp 슬라이더 변수
        public Slider hpSlider;
        // 플레이어 공격력
        public int attackPower = 3;

        // 적 캐릭터
        public GameObject Customer1;
        public GameObject Customer2;
        public GameObject Customer3;

        private Animator animator;

        void Start()
        {
            // 최초 플레이어 동작-대기
            m_State = PlayerState.Idle_A;
            cc = GetComponent<CharacterController>();
            animator = GetComponentInChildren<Animator>(); // 하위 오브젝트에서 Animator를 찾도록 변경

            if (animator == null)
            {
                Debug.LogError("Animator component missing on the Player game object or its children.");
            }
            else
            {
                Debug.Log("Animator component found.");
            }
        }

        // 동작 애니메이션
        // 플레이어 상태 상수
        enum PlayerState
        {
            Idle_A,
            Run,
            Jump,
            Attack,
            Hit,
            Death
        }
        // 플레이어 상태 변수
        PlayerState m_State;

        // 동작 애니메이션
        void Idle_A() // 대기
        {
            // 만일, 플레이어가 이동할 경우 Run 상태로 전환한다.
            if (cc.velocity.magnitude > 0.1f)
            {
                m_State = PlayerState.Run;
            }
            // 만일, 플레이어가 점프할 경우 Jump 상태로 전환한다.
            else if (yVelocity > 0.1f)
            {
                m_State = PlayerState.Jump;
            }
        }

        void Hit(int damage) // 공격받음(플레이어 피격함수)
        {
            // 이미 피격, 사망 상태라면 무처리 및 함수종료
            if (m_State == PlayerState.Hit || m_State == PlayerState.Death)
            {
                return;
            }

            //적의 공격력만큼 플레이어의 체력 감소
            hp -= damage;

            // 피격 상태 처리 코루틴 실행
            StartCoroutine(DamageProcess());

            // 플레이어 체력이 0보다 크면 피격상태
            if (hp > 0)
            {
                m_State = PlayerState.Hit;
            }
            // 그렇지 않으면 죽음상태
            else
            {
                m_State = PlayerState.Death;
                Death();
            }
        }

        IEnumerator DamageProcess() // 데미지 처리용 코루틴 함수
        {
            // 피격 모션 시간만큼 대기
            yield return new WaitForSeconds(0.5f);
            // 현재 상태 -> 대기 상태로 전환
            m_State = PlayerState.Idle_A;
        }

        void Attack() // 공격함
        {
            m_State = PlayerState.Attack;
            Customer1.GetComponent<CustomerMove1>().Hit(attackPower);
            Customer2.GetComponent<CustomerMove2>().Hit(attackPower);
            Customer3.GetComponent<CustomerMove3>().Hit(attackPower);
        }

        void Death() // 죽음
        {
            // 피격 코루틴 중지
            StopAllCoroutines();
            // 캐릭터 컨트롤러 컴포넌트 비활성화
            cc.enabled = false;
        }

        void Run() // 달리기
        {
            // 달리기 애니메이션 처리 (추가 구현 필요)
            if (cc.velocity.magnitude < 0.1f)
            {
                m_State = PlayerState.Idle_A;
            }
        }

        void Jump() // 점프
        {
            // 점프 애니메이션 처리 (추가 구현 필요)
            if (cc.isGrounded)
            {
                m_State = PlayerState.Idle_A;
            }
        }

        void Update()
        {
            float h = Input.GetAxis("Horizontal");
            float v = Input.GetAxis("Vertical");

            Vector3 dir = new Vector3(h, 0, v);
            dir = dir.normalized;
            dir = Camera.main.transform.TransformDirection(dir);
            dir.y = 0;

            if (isJumping && cc.isGrounded)
            {
                isJumping = false;
                yVelocity = 0;
            }

            if (Input.GetButtonDown("Jump") && !isJumping && cc.isGrounded)
            {
                yVelocity = jumpPower;
                isJumping = true;
            }

            yVelocity += gravity * Time.deltaTime;
            dir.y = yVelocity;

            cc.Move(dir * moveSpeed * Time.deltaTime);

            // 동작 애니메이션
            // 현재 상태를 체크해 해당 상태별로 정해진 기능을 수행하게 하고 싶다.
            switch (m_State)
            {
                case PlayerState.Idle_A:
                    Idle_A();
                    break;
                case PlayerState.Run:
                    Run();
                    break;
                case PlayerState.Jump:
                    Jump();
                    break;
                case PlayerState.Attack:
                    Attack();
                    break;
                case PlayerState.Hit:
                    // Hit() 메소드는 이미 데미지를 받을 때 호출되므로 여기서는 아무 것도 하지 않음
                    break;
                case PlayerState.Death:
                    Death();
                    break;
            }

            // 현재 플레이어 hp를 hp 슬라이더 value에 반영
            if (hpSlider != null)
            {
                hpSlider.value = (float)hp / (float)maxHp;
            }
        }
    }
}
